- name: ec2 and route53
  hosts: local
  connection: local
  vars:
    ami_id: ami-09c813fb71547fc4f
    sg_id: sg-04bb003e653859fa2
    zone_id: Z10446792H6QP6XMMVXFH
    domain_name: "kolanu.space"
    # instances:
    # - mongodb
  tasks:
  - name: create ec2 instance
    amazon.aws.ec2_instance:
      name: "{{ item }}"    #item represents the output in the loop
      instance_type: t3.micro
      security_group: "{{ sg_id }}"
      image_id: "{{ ami_id }}"
      tags:
        Name: "{{ item }}"
    loop: "{{ instances }}"
    register: ec2_output

  - name: print the ec2_output   #
    ansible.builtin.debug:
       msg: "{{ ec2_output }}" 

  # - name: print public_ip
  #   ansible.builtin.debug:
  #      msg: "{{ item.instances[0].public_ip_address }}"
  #   loop: "{{ ec2_output.results }}"

  # - name: print private_ip
  #   ansible.builtin.debug:
  #      msg: "{{ item.instances[0].private_ip_address }}"
  #   loop: "{{ ec2_output.results }}"
    

  - name: create route53
    amazon.aws.route53:
      state: present
      zone: "{{ domain_name }}"
      record: "{{ item.item }}.{{ domain_name }}" #-> #mongodb.kolanu.space# here 1st)item=instances  within the instances block-> 2nd item=mongodb in ec2_output  querying the ec2_output 
      type: A
      ttl: 1
      value: "{{ item.instances[0].private_ip_address }}"
      overwrite: true
    loop: "{{ ec2_output.results }}"

# we are creating one record for public_ip only for frontend
  - name: create route53
    amazon.aws.route53:
      state: present
      zone: "{{ domain_name }}"
      record: "{{ domain_name }}" #-> #kolanu.space# here 1st)item=instances  within the instances block-> 2nd item=mongodb in ec2_output  querying the ec2_output 
      type: A
      ttl: 1
      value: "{{ item.instances[0].public_ip_address }}"
      overwrite: true
    when: item.item == "frontend"
    loop: "{{ ec2_output.results }}"
    
